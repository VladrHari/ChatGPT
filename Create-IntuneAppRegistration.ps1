<#
.SYNOPSIS
    This script automates the creation of an Azure AD Application, assigns the necessary permissions, 
    creates a service principal, and generates a client secret.

.DESCRIPTION
    The script performs the following tasks:
    1. Registers a new application in Azure Active Directory.
    2. Creates a service principal for the registered application.
    3. Assigns the necessary Microsoft Graph API permissions to the service principal.
    4. Generates a client secret for the application and outputs the details needed for authentication.

.PARAMETER AppName
    The name of the Azure AD application to be created. 

.PARAMETER RedirectUri
    Optional. The redirect URI for the application, typically used in web applications. 

.PARAMETER Permissions
    An array of permissions required by the application to manage resources in Microsoft Intune.

.EXAMPLE
    # Run the script to create an application with default settings:
    .\Create-IntuneAppRegistration.ps1

    # Run the script with a custom application name and redirect URI:
    .\Create-IntuneAppRegistration.ps1 -AppName "CustomAppName" -RedirectUri "https://customredirect.com"

.NOTES
    Ensure you have the necessary permissions to create applications and service principals in Azure AD.
    The client secret generated by this script will be shown only once; make sure to store it securely.

    Author: ChatGPT
    Date: 2024-08-11

#>

# Import the Microsoft Graph module. Uncomment this line if the module is not already imported in your environment.
# Import-Module Microsoft.Graph

# Connect to Microsoft Graph with the required permissions. 
# The $scopes array defines the permissions needed by the script to perform its tasks.
$scopes = @("Application.ReadWrite.All", "AppRoleAssignment.ReadWrite.All", "Directory.ReadWrite.All")
Connect-MgGraph -Scopes $scopes

# Define variables that will be used in the script.
# $AppName is the name of the application that will be registered in Azure AD.
# $RedirectUri is an optional redirect URI for the application (often used in web apps).
# $Permissions is an array of permissions that the application will need to manage Intune resources.
$AppName = "IntuneAppDeployment"
$RedirectUri = "https://localhost"  # Optional redirect URI for the application
$Permissions = @(
    "DeviceManagementApps.ReadWrite.All",               # Permission to read and write Intune apps
    "DeviceManagementConfiguration.ReadWrite.All",      # Permission to read and write Intune configurations
    "DeviceManagementManagedDevices.ReadWrite.All"      # Permission to read and write managed devices in Intune
)

# Step 1: Create a new application registration in Azure AD using the specified name and redirect URI.
$app = New-MgApplication -DisplayName $AppName -Web @{ RedirectUris = @($RedirectUri) }

# Step 2: Create a service principal for the application. 
# A service principal is an identity that the application will use to access resources in Azure.
$servicePrincipal = New-MgServicePrincipal -AppId $app.AppId

# Step 3: Assign the required API permissions to the application by assigning roles to the service principal.
# First, retrieve the Microsoft Graph service principal.
$graphApi = Get-MgServicePrincipal -Filter "AppId eq '00000003-0000-0000-c000-000000000000'" # Microsoft Graph API

# For each permission in the $Permissions array, find the corresponding role in the Microsoft Graph service principal
# and assign that role to the application's service principal.
foreach ($perm in $Permissions) {
    $role = $graphApi.AppRoles | Where-Object { $_.Value -eq $perm }
    New-MgServicePrincipalAppRoleAssignment -PrincipalId $servicePrincipal.Id -ResourceId $graphApi.Id -AppRoleId $role.Id -ServicePrincipalId $servicePrincipal.Id
}

# Step 4: Generate a client secret for the application.
# The client secret is like a password that the application uses to authenticate itself when accessing Azure resources.
$secret = Add-MgApplicationPassword -ApplicationId $app.Id
$clientSecretValue = $secret.SecretText

# Output the important details for the registered application.
# These include the application name, client ID (App ID), tenant ID, and the client secret.
Write-Output "App Name: $AppName"
Write-Output "App ID (Client ID): $($app.AppId)"
Write-Output "Tenant ID: $((Get-MgOrganization).Id)"
Write-Output "Client Secret: $clientSecretValue"
Write-Output "Please save the Client Secret securely, as it won't be available again."

# Disconnect from Microsoft Graph to end the session.
# Uncomment this line if you want to ensure the session is closed after the script runs.
# Disconnect-MgGraph
